/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.doctor;

import DataBase.ConnectionTimeOutException;
import DataBase.DBOperations;
import Domain.Doctor;
import Domain.LabReport;
import Domain.MedicalReport;
import Domain.Patient;
import gui.lab.ShowLabReportGUI;
import gui.login.LoginFace;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author DJ
 */
public class DocGUI extends javax.swing.JFrame {

    static Doctor newDoc;
    public DocGUI(Doctor loggedDoc) {
        newDoc = loggedDoc;
        initComponents();
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent we) {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog (null, "Are you sure you want to log out?","Log out",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                newDoc.setAvailablity(false);
                setVisible(false);
                LoginFace logWindow = new LoginFace();
                logWindow.setVisible(true);
                }
                
            }    
                });
    }
    Patient pnt;
    DBOperations ptDB;
    int pid;
    int mode;
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        detailList = new javax.swing.JList();
        backBtn = new javax.swing.JButton();
        ptDetailsBtn = new javax.swing.JButton();
        TreatReportsBtn = new javax.swing.JButton();
        labReportsBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        SearchCatChooser = new javax.swing.JComboBox();
        SearchBox = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(51, 255, 204));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Details"));

        detailList.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        detailList.setModel(new DefaultListModel());
        detailList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detailListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(detailList);

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/doctor/previous.png"))); // NOI18N
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        ptDetailsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/doctor/genetics.png"))); // NOI18N
        ptDetailsBtn.setText("Patient details");
        ptDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ptDetailsBtnActionPerformed(evt);
            }
        });

        TreatReportsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/doctor/patient_chart.png"))); // NOI18N
        TreatReportsBtn.setText("Treatment Reports");
        TreatReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TreatReportsBtnActionPerformed(evt);
            }
        });

        labReportsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/doctor/ecg_chart.png"))); // NOI18N
        labReportsBtn.setText("Lab Reports");
        labReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labReportsBtnActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Search"));

        jLabel1.setText("Category");

        SearchCatChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PID", "NIC", " " }));
        SearchCatChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCatChooserActionPerformed(evt);
            }
        });

        SearchBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBoxActionPerformed(evt);
            }
        });
        SearchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchBoxKeyReleased(evt);
            }
        });

        SearchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/manager/zoom_in.png"))); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchCatChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(SearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SearchButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(SearchCatChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/login/Secound5.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1059, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ptDetailsBtn)
                            .addComponent(labReportsBtn)
                            .addComponent(TreatReportsBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)
                        .addComponent(ptDetailsBtn)
                        .addGap(18, 18, 18)
                        .addComponent(TreatReportsBtn)
                        .addGap(18, 18, 18)
                        .addComponent(labReportsBtn)
                        .addGap(73, 73, 73))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        mode = 1;
        if(SearchCatChooser.getSelectedIndex()==0){
            pid = Integer.parseInt(SearchBox.getText());
        }
        if(SearchCatChooser.getSelectedIndex()==1){            
            String NIC = SearchBox.getText();
       //     ptDB.c
        }
        DBOperations dateOpr = DBOperations.getInstace(); 
        try {
            pnt = dateOpr.getPatient(pid);
        } catch (SQLException ex) {
            Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ConnectionTimeOutException ex) {
            JOptionPane.showMessageDialog(null,ex.toString());
            return;
        }
        int index = SearchCatChooser.getSelectedIndex();
        if(index==1){
            String nic = SearchBox.getText();
            //pnt = dateOpr.searchPatients(null,nic );
        }
        detailList.setModel(new DefaultListModel());
        DefaultListModel model = (DefaultListModel)detailList.getModel(); 
        model.addElement(pnt.getFullName());
        model.addElement(pnt.getDateOfBirth());
        model.addElement(pnt.getGender());
        model.addElement(("Blood group : " + pnt.getBloodGroup()));
        model.addElement(("Allergies : " + pnt.getAllergies()));
        
    }//GEN-LAST:event_SearchButtonActionPerformed

    
    
    private void ptDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ptDetailsBtnActionPerformed
        // TODO add your handling code here:
        detailList.setModel(new DefaultListModel());
        DefaultListModel model = (DefaultListModel)detailList.getModel(); 
        model.addElement(pnt.getFullName());
        model.addElement(pnt.getDateOfBirth());
        model.addElement(pnt.getGender());
        model.addElement(("Blood group : " + pnt.getBloodGroup()));
        model.addElement(("Allergies : " + pnt.getAllergies()));
    }//GEN-LAST:event_ptDetailsBtnActionPerformed

    private void TreatReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TreatReportsBtnActionPerformed
        
        mode = 2;
        detailList.setModel(new DefaultListModel());
         
         DefaultListModel model = (DefaultListModel)detailList.getModel(); 

         ArrayList<Date> medicalDates = null;
         ptDB = DBOperations.getInstace();
        try {
            medicalDates = ptDB.getMedicalDates(pid);
        } catch (SQLException ex) {
            Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
            
        } catch (ConnectionTimeOutException ex) {
            JOptionPane.showMessageDialog(null,ex.toString());
            return;
        }
         for(Date dt : medicalDates){
             model.addElement(dt);
         }
         
    }//GEN-LAST:event_TreatReportsBtnActionPerformed

    private void SearchCatChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCatChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchCatChooserActionPerformed

    private void labReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labReportsBtnActionPerformed
        // TODO add your handling code here:
        mode = 3;
        ptDB = DBOperations.getInstace();
        detailList.setModel(new DefaultListModel());
        DefaultListModel model = (DefaultListModel)detailList.getModel(); 
        ArrayList<Date> labDates = null;
        try {
            labDates = ptDB.getLabDates(pid);
        } catch (SQLException ex) {
            Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ConnectionTimeOutException ex) {
            JOptionPane.showMessageDialog(null,ex.toString());
            return;
        }
        for(Date dt : labDates){
             model.addElement(dt);
         }
        
    }//GEN-LAST:event_labReportsBtnActionPerformed

    private void detailListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detailListMouseClicked
        // TODO add your handling code here:
        if(mode == 2){
            if(detailList.getComponentCount()!= 0){
                Date selectedDate = (Date)detailList.getSelectedValue();
                ArrayList<MedicalReport> mediReports = null;
                    try {
                        mediReports = ptDB.getMedicalReports(pid, selectedDate);
                    } catch (SQLException ex) {
                        Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ConnectionTimeOutException ex) {
                        JOptionPane.showMessageDialog(null,ex.toString());
                        return;
                }
                detailList.setModel(new DefaultListModel());
                DefaultListModel model = (DefaultListModel)detailList.getModel(); 
                for(MedicalReport mdRpt : mediReports){
                     model.addElement(("Report num : " + mdRpt.getMedicalReportNum()+" Test types : "+ mdRpt.getTestTypes()));
                }
                 mode = 4;
            } 
        }
        
        else if(mode == 3){
            if(detailList.getComponentCount()!= 0){
                Date selectedDate = (Date)detailList.getSelectedValue();
                ArrayList<LabReport> labReports = null;
                    try {
                        labReports = ptDB.getLabReports(pid, selectedDate);
                    } catch (SQLException ex) {
                        Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ConnectionTimeOutException ex) {
                    JOptionPane.showMessageDialog(null,ex.toString());
                     return;
                }
                detailList.setModel(new DefaultListModel());
                DefaultListModel model = (DefaultListModel)detailList.getModel(); 
                for(LabReport lbRpt : labReports){
                     model.addElement(("Report num : " + lbRpt.getLabReportNo()+" Test types : "+ lbRpt.getTestType()));
                 }
                mode = 5;
            }
        }
        
        else if(mode == 4){
            if(detailList.getComponentCount()!= 0){
                String reqReportStr = detailList.getSelectedValue().toString();
                String rptNumStr =reqReportStr.substring(13, reqReportStr.indexOf(" ",13)); 
                int reportNum = Integer.parseInt(rptNumStr);
                MedicalReport reqReport = null;
                try {
                    reqReport = ptDB.getMedicalReport(reportNum);
                } catch (SQLException ex) {
                    Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ConnectionTimeOutException ex) {
                    JOptionPane.showMessageDialog(null,ex.toString());
                    return;
                }
                ReportViewer report = new ReportViewer();
                report.showReport(reportNum,reqReport.getTreatementDescription());
                report.setVisible(true);
            }
        }
        
        else if(mode == 5){
            if(detailList.getComponentCount()!= 0){
                String reqlabReportStr = detailList.getSelectedValue().toString();
                String labrptNumStr =reqlabReportStr.substring(13, reqlabReportStr.indexOf(" ",13)); 
                int labreportNum = Integer.parseInt(labrptNumStr);
                LabReport reqReport = null;            
                try {
                    reqReport = ptDB.getLabReport(labreportNum);
                } catch (SQLException ex) {
                    Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ConnectionTimeOutException ex) {
                    JOptionPane.showMessageDialog(null,ex.toString());
                    return;
                }
                ShowLabReportGUI labReport = new ShowLabReportGUI(reqReport);
                labReport.setVisible(true);
            }
           
        }
        
    }//GEN-LAST:event_detailListMouseClicked

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        if(mode==5){
            labReportsBtnActionPerformed(evt);
        }
        else if(mode==4){
            TreatReportsBtnActionPerformed(evt);
        }
        
        else if(mode==3||mode==2){
            ptDetailsBtnActionPerformed(evt);
        }
                      
    }//GEN-LAST:event_backBtnActionPerformed

    private void SearchBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_SearchBoxActionPerformed

    private void SearchBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchBoxKeyReleased
        // TODO add your handling code here:
        if(evt.getKeyCode()==10){
            mode = 1;
            if(SearchCatChooser.getSelectedIndex()==0){
                pid = Integer.parseInt(SearchBox.getText());
            }
            if(SearchCatChooser.getSelectedIndex()==1){            
                String NIC = SearchBox.getText();
           
            }
            DBOperations dateOpr = DBOperations.getInstace(); 
            try {
                pnt = dateOpr.getPatient(pid);
            } catch (SQLException ex) {
                Logger.getLogger(DocGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ConnectionTimeOutException ex) {
                JOptionPane.showMessageDialog(null,ex.toString());
                return;
            }
            int index = SearchCatChooser.getSelectedIndex();
            if(index==1){
                String nic = SearchBox.getText();
                //pnt = dateOpr.searchPatients(null,nic );
            }
            detailList.setModel(new DefaultListModel());
            DefaultListModel model = (DefaultListModel)detailList.getModel(); 
            model.addElement(pnt.getFullName());
            model.addElement(pnt.getDateOfBirth());
            model.addElement(pnt.getGender());
            model.addElement(("Blood group : " + pnt.getBloodGroup()));
            model.addElement(("Allergies : " + pnt.getAllergies()));
        
        
        }
    }//GEN-LAST:event_SearchBoxKeyReleased

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocGUI(newDoc).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField SearchBox;
    private javax.swing.JButton SearchButton;
    private javax.swing.JComboBox SearchCatChooser;
    private javax.swing.JButton TreatReportsBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JList detailList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton labReportsBtn;
    private javax.swing.JButton ptDetailsBtn;
    // End of variables declaration//GEN-END:variables
}
