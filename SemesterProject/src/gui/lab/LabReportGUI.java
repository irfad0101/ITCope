/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.lab;

import DataBase.ConnectionTimeOutException;
import DataBase.DBOperations;
import DataBase.Help;
import Domain.LabReport;
import gui.login.LoginFace;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Toshiba
 */
public class LabReportGUI extends javax.swing.JFrame {
    java.awt.event.ActionEvent evtt;
    private String testNumber;
    private DefaultCellEditor cellEditor;
    private DBOperations ad ; 
    private LabReport labReport;
    private boolean updateState;
    public LabReportGUI() {
        ad=DBOperations.getInstace();
        initComponents();
        updateState=false;
        FBCpanel.setVisible(false);
        FBSpanel.setVisible(false);
        TCpanel.setVisible(false);
        UFRpanel.setVisible(false);
        LPpanel.setVisible(false);
        this.setLocationRelativeTo(null);
    }
    private String chooseTest(){
        String s=(String) TestBox.getSelectedItem();
        switch (s) {
            case "01":
                textTestName.setText("Fasting Blood Sugar");
                FBCpanel.setVisible(false);
                FBSpanel.setVisible(true);
                TCpanel.setVisible(false);
                UFRpanel.setVisible(false);
                LPpanel.setVisible(false);
                return s;
            case "02":
                textTestName.setText("Urine Full Report");
                FBCpanel.setVisible(false);
                FBSpanel.setVisible(false);
                TCpanel.setVisible(false);
                UFRpanel.setVisible(true);
                LPpanel.setVisible(false);
                return s;
            case "03":
                textTestName.setText("Full Blood Count");
                FBCpanel.setVisible(true);
                FBSpanel.setVisible(false);
                TCpanel.setVisible(false);
                UFRpanel.setVisible(false);
                LPpanel.setVisible(false);
                return s;
            case "04":
                textTestName.setText("Serum Lipid Profile");
                FBCpanel.setVisible(false);
                FBSpanel.setVisible(false);
                TCpanel.setVisible(false);
                UFRpanel.setVisible(false);
                LPpanel.setVisible(true);
                return s;
            case "05":
                textTestName.setText("Total Cholesterol");
                FBCpanel.setVisible(false);
                FBSpanel.setVisible(false);
                TCpanel.setVisible(true);
                UFRpanel.setVisible(false);
                LPpanel.setVisible(false);
                return s;
        }
        return null;
        
    }
    public static boolean isValidDate(String inDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        try {
          dateFormat.parse(inDate.trim());
        } catch (ParseException pe) {
          return false;
        }
        return true;
  }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        detailPanel = new javax.swing.JPanel();
        TCpanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        CholesterolAmount = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnConfirmTC = new javax.swing.JButton();
        FBSpanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fbsAmount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnconfirmFBS = new javax.swing.JButton();
        FBCpanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        FBCtable = new javax.swing.JTable();
        btnConfirmFBC = new javax.swing.JButton();
        UFRpanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        UFRtable = new javax.swing.JTable();
        btnConfirmUFR = new javax.swing.JButton();
        LPpanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LPtable = new javax.swing.JTable();
        btnConfirmLP = new javax.swing.JButton();
        generalDetailPanel = new javax.swing.JPanel();
        patientID = new javax.swing.JLabel();
        textPatientID = new javax.swing.JTextField();
        labTechnicianID = new javax.swing.JLabel();
        textLabTecID = new javax.swing.JTextField();
        testID = new javax.swing.JLabel();
        TestBox = new javax.swing.JComboBox();
        testName = new javax.swing.JLabel();
        textTestName = new javax.swing.JTextField();
        date = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textYear = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textMonth = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        textDate = new javax.swing.JTextField();
        titlePanel = new javax.swing.JPanel();
        titleName = new javax.swing.JLabel();
        reportName = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        detailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Details of the test", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Total Cholesterol");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("mg/dl");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("( ANALYZED BY 3000 EVOLUTION SEMI AUTOMATED BIIO CHEMISTRY ANALYZER )");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Reference range : 140-239 mg/dl");

        btnConfirmTC.setText("Confirm");
        btnConfirmTC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmTCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TCpanelLayout = new javax.swing.GroupLayout(TCpanel);
        TCpanel.setLayout(TCpanelLayout);
        TCpanelLayout.setHorizontalGroup(
            TCpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TCpanelLayout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(CholesterolAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addGap(124, 124, 124))
            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(TCpanelLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(btnConfirmTC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        TCpanelLayout.setVerticalGroup(
            TCpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TCpanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TCpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CholesterolAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addGap(25, 25, 25)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(btnConfirmTC)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Fasting Blood Sugar");

        fbsAmount.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("mg/dl");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Reference values : 70 - 110 mg/dl");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("( ANALYZED BY 3000 EVOLUTION SEMI AUTOMATED BIO CHEMISTRY ANALYZER )");

        btnconfirmFBS.setText("Confirm");
        btnconfirmFBS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnconfirmFBSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FBSpanelLayout = new javax.swing.GroupLayout(FBSpanel);
        FBSpanel.setLayout(FBSpanelLayout);
        FBSpanelLayout.setHorizontalGroup(
            FBSpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FBSpanelLayout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(fbsAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                .addGap(295, 295, 295))
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(FBSpanelLayout.createSequentialGroup()
                .addGap(403, 403, 403)
                .addComponent(btnconfirmFBS)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FBSpanelLayout.setVerticalGroup(
            FBSpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FBSpanelLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(FBSpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fbsAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(41, 41, 41)
                .addComponent(jLabel7)
                .addGap(28, 28, 28)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnconfirmFBS)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        FBCpanel.setPreferredSize(new java.awt.Dimension(489, 278));

        FBCtable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        FBCtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"White blood cells", null, "        K/µL", "   (4.0-11.0)"},
                {"Neutrophiles", null, "         %", "     (40-64)"},
                {"Lymphocytes", null, "         %", "     (10-40)"},
                {"Eosinophiles", null, "         %", "     (01-04)"},
                {"Monocytes", null, "         %", "     (02-05)"},
                {"Basophiles", null, "         %", "     (00-01)"},
                {"Abnormal cells", null, "         %", "     (00-00)"},
                {"Haemoglobin", null, "        g/dL", "(F 11-15)  (M 12-17.5)"},
                {"Red blood count", null, "        M/µL", "     (3.5-6)"},
                {"PCV", null, "         %", "(F 32-47)  (M 40-54)"},
                {"MCV", null, null, "    (70-96)"},
                {"MCH", null, "         pg", "    (27-32)"},
                {"MCHC", null, "        g/dL", "    (30-35)"},
                {"Platelet count", null, null, "   (150-450)"}
            },
            new String [] {
                "Descripition", "Result ", "Units", "Normal range"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FBCtable.setColumnSelectionAllowed(true);
        FBCtable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FBCtableKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(FBCtable);
        FBCtable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnConfirmFBC.setText("Confirm");
        btnConfirmFBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmFBCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FBCpanelLayout = new javax.swing.GroupLayout(FBCpanel);
        FBCpanel.setLayout(FBCpanelLayout);
        FBCpanelLayout.setHorizontalGroup(
            FBCpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
            .addGroup(FBCpanelLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(btnConfirmFBC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FBCpanelLayout.setVerticalGroup(
            FBCpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FBCpanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmFBC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        UFRtable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        UFRtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"COLOUR", null},
                {"APPEARANCE", null},
                {"PH", null},
                {"S.G", null},
                {"PROTEIN", null},
                {"SUGAR", null},
                {"BILIRUBIN", null},
                {"NITIRITE", null},
                {"KEYTONE", null},
                {"UROBILINOGEN", null},
                {"PUS CELLS", null},
                {"RED CELLS", null},
                {"EPI CELLS", null},
                {"CRYSTALS ", null},
                {"CAST", null},
                {"OTHER", null}
            },
            new String [] {
                "Symptoms", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        UFRtable.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(UFRtable);
        UFRtable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnConfirmUFR.setText("Confirm");
        btnConfirmUFR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmUFRActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout UFRpanelLayout = new javax.swing.GroupLayout(UFRpanel);
        UFRpanel.setLayout(UFRpanelLayout);
        UFRpanelLayout.setHorizontalGroup(
            UFRpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UFRpanelLayout.createSequentialGroup()
                .addGroup(UFRpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UFRpanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(UFRpanelLayout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(btnConfirmUFR)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        UFRpanelLayout.setVerticalGroup(
            UFRpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UFRpanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConfirmUFR))
        );

        LPtable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        LPtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Total Cholesterol", null, "               mg/dl", "               239<"},
                {"Triglyserides", null, "               mg/dl", "            (40-160)"},
                {"HDL", null, "               mg/dl ", "                >35"},
                {"LDL", null, "               mg/dl", "               <160"},
                {"VLDL", null, "               mg/dl", "                <40"},
                {"CHO/HDL", null, "               mg/dl", "            (2.0-5.0)"}
            },
            new String [] {
                "Description", "Result", "Units", "Reference"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        LPtable.setColumnSelectionAllowed(true);
        LPtable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                LPtableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(LPtable);
        LPtable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnConfirmLP.setText("Confirm");
        btnConfirmLP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmLPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LPpanelLayout = new javax.swing.GroupLayout(LPpanel);
        LPpanel.setLayout(LPpanelLayout);
        LPpanelLayout.setHorizontalGroup(
            LPpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LPpanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConfirmLP)
                .addGap(253, 253, 253))
        );
        LPpanelLayout.setVerticalGroup(
            LPpanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LPpanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmLP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout detailPanelLayout = new javax.swing.GroupLayout(detailPanel);
        detailPanel.setLayout(detailPanelLayout);
        detailPanelLayout.setHorizontalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(FBSpanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 196, Short.MAX_VALUE)
                    .addComponent(FBCpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 197, Short.MAX_VALUE)))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 205, Short.MAX_VALUE)
                    .addComponent(UFRpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 205, Short.MAX_VALUE)))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 186, Short.MAX_VALUE)
                    .addComponent(TCpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 186, Short.MAX_VALUE)))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 152, Short.MAX_VALUE)
                    .addComponent(LPpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 153, Short.MAX_VALUE)))
        );
        detailPanelLayout.setVerticalGroup(
            detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailPanelLayout.createSequentialGroup()
                .addComponent(FBSpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 28, Short.MAX_VALUE)
                    .addComponent(FBCpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 29, Short.MAX_VALUE)))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 26, Short.MAX_VALUE)
                    .addComponent(UFRpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 27, Short.MAX_VALUE)))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 65, Short.MAX_VALUE)
                    .addComponent(TCpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 66, Short.MAX_VALUE)))
            .addGroup(detailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(detailPanelLayout.createSequentialGroup()
                    .addGap(0, 85, Short.MAX_VALUE)
                    .addComponent(LPpanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 85, Short.MAX_VALUE)))
        );

        generalDetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "General details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12))); // NOI18N

        patientID.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        patientID.setText("Patient ID:");

        labTechnicianID.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        labTechnicianID.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labTechnicianID.setText("Lab Technician ID:");

        testID.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        testID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        testID.setText("Test ID :");

        TestBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", " " }));
        TestBox.setSelectedIndex(-1);
        TestBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestBoxActionPerformed(evt);
            }
        });

        testName.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        testName.setText("Test Name:");

        textTestName.setEditable(false);

        date.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        date.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        date.setText("Date:");

        jLabel2.setText("YYYY");

        textYear.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel3.setText("MM");

        textMonth.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        jLabel5.setText("DD");

        textDate.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        javax.swing.GroupLayout generalDetailPanelLayout = new javax.swing.GroupLayout(generalDetailPanel);
        generalDetailPanel.setLayout(generalDetailPanelLayout);
        generalDetailPanelLayout.setHorizontalGroup(
            generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generalDetailPanelLayout.createSequentialGroup()
                .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(generalDetailPanelLayout.createSequentialGroup()
                        .addComponent(patientID, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textPatientID))
                    .addGroup(generalDetailPanelLayout.createSequentialGroup()
                        .addComponent(labTechnicianID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textLabTecID, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(248, 248, 248)
                .addComponent(testID, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TestBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(generalDetailPanelLayout.createSequentialGroup()
                        .addComponent(date)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addComponent(testName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(generalDetailPanelLayout.createSequentialGroup()
                        .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(textTestName)))
        );
        generalDetailPanelLayout.setVerticalGroup(
            generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generalDetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generalDetailPanelLayout.createSequentialGroup()
                        .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(testID)
                                .addComponent(TestBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textTestName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(testName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(date)
                            .addComponent(textDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57))
                    .addGroup(generalDetailPanelLayout.createSequentialGroup()
                        .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientID)
                            .addComponent(textPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(generalDetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labTechnicianID)
                            .addComponent(textLabTecID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        titlePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        titleName.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        titleName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleName.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/login/Secound5.png"))); // NOI18N

        reportName.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        reportName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reportName.setText("Patient Lab Report");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(titlePanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(reportName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleName, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(reportName)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        btnEdit.setText("Edit last entry");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generalDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(detailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generalDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnEdit)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TestBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestBoxActionPerformed
         chooseTest();
    }//GEN-LAST:event_TestBoxActionPerformed

    private void btnConfirmUFRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmUFRActionPerformed
        if(updateState){
            try {
                DBOperations ad = DBOperations.getInstace();
                labReport=ad.getLastLabReport();
            } catch (SQLException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ConnectionTimeOutException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
               
            }
        }else{
                labReport=new LabReport();
        }
        
        String item=(String)TestBox.getSelectedItem();
        labReport.setTestType(Integer.valueOf(item));
        String tecId=textLabTecID.getText();
        String pid=textPatientID.getText();
        String data;
        try{
            if(Integer.valueOf(pid) instanceof Integer && Integer.valueOf(pid)<=ad.getLastPID()){
                labReport.setPID(Integer.valueOf(pid));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Patient ID is incorrect");
            textPatientID.setText(null);
            return;
        } catch (SQLException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Patient ID is not registered");
            return;
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return;
            
        }
        try{
            if(Integer.valueOf(tecId) instanceof Integer){
                labReport.setLabTechID(Integer.valueOf(tecId));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Lab technician ID is incorrect");
            textLabTecID.setText(null);
            return;
        }
        try{
            if(Integer.valueOf(textYear.getText())instanceof Integer && Integer.valueOf(textMonth.getText())instanceof Integer && Integer.valueOf(textDate.getText())instanceof Integer){
                labReport.setDate(Help.getDate(Integer.valueOf(textYear.getText()), Integer.valueOf(textMonth.getText()), Integer.valueOf(textDate.getText())));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Date is incorrect");
            textYear.setText(null);
            textMonth.setText(null);
            textDate.setText(null);
            return;
        }
        labReport.getDataList().clear();
        for(int i=0;i<UFRtable.getRowCount();i++){
            data=(String)UFRtable.getValueAt(i,1);
            labReport.addDataToTheList(data);
        }  
        
        
        try{
            if(updateState){
                ad.updateLabReport(labReport);
            }else{
                ad.addLabReport(labReport);
            }
            JOptionPane.showMessageDialog(null, "Data is successfully added");
            this.dispose();
            new LabReportGUI().setVisible(true);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Error in patient id or tecnician id");
        } catch (ConnectionTimeOutException ex) {
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmUFRActionPerformed

    private void btnConfirmTCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmTCActionPerformed
        if(updateState){
            try {
                DBOperations ad = DBOperations.getInstace();
                labReport=ad.getLastLabReport();
            } catch (SQLException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ConnectionTimeOutException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
                
            }
        }else{
              labReport=new LabReport();
        }
       
        String item=(String)TestBox.getSelectedItem();
        labReport.setTestType(Integer.valueOf(item));
        String tecId=textLabTecID.getText();
        String pid=textPatientID.getText();
        String data=CholesterolAmount.getText();
        try{
            if(Integer.valueOf(pid) instanceof Integer && Integer.valueOf(pid)<=ad.getLastPID()){
                labReport.setPID(Integer.valueOf(pid));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Patient ID is incorrect");
            textPatientID.setText(null);
            return;
        } catch (SQLException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Patient ID is not registered");
            return;
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return;
           
        }
        try{
            if(Integer.valueOf(tecId) instanceof Integer){
                labReport.setLabTechID(Integer.valueOf(tecId));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Lab technician ID is incorrect");
            textLabTecID.setText(null);
            return;
        }
        try{
            if(Integer.valueOf(textYear.getText())instanceof Integer && Integer.valueOf(textMonth.getText())instanceof Integer && Integer.valueOf(textDate.getText())instanceof Integer){
                labReport.setDate(Help.getDate(Integer.valueOf(textYear.getText()), Integer.valueOf(textMonth.getText()), Integer.valueOf(textDate.getText())));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Date is incorrect");
            textYear.setText(null);
            textMonth.setText(null);
            textDate.setText(null);
            return;
        }
        try{
            labReport.getDataList().clear();
            if(Double.valueOf(data) instanceof Double){
                 labReport.addDataToTheList(data);
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Data is incorrect");
            CholesterolAmount.setText(null);
            return;
        }
        
       
        try{
            if(updateState){
                ad.updateLabReport(labReport);
            }else{
                ad.addLabReport(labReport);
            }
            JOptionPane.showMessageDialog(null, "Data is successfully added");
            this.dispose();
            new LabReportGUI().setVisible(true);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Error in patient id or tecnician id");
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmTCActionPerformed

    private void btnconfirmFBSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnconfirmFBSActionPerformed
        if(updateState){
             DBOperations ad = DBOperations.getInstace(); 
             try {
                   labReport=ad.getLastLabReport();
             } catch (SQLException ex) {
                   Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
             } catch (ConnectionTimeOutException ex) {
                   Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
                   JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
             }
        }else{
             labReport=new LabReport();
        }
        
        String item=(String)TestBox.getSelectedItem();
        labReport.setTestType(Integer.valueOf(item));
        String tecId=textLabTecID.getText();
        String pid=textPatientID.getText();
        String data=fbsAmount.getText();
        try{
            if(Integer.valueOf(pid) instanceof Integer && Integer.valueOf(pid)<=ad.getLastPID()){
                labReport.setPID(Integer.valueOf(pid));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Patient ID is incorrect");
            textPatientID.setText(null);
            return;
        } catch (SQLException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Patient ID is not registered");
            return;
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try{
            if(Integer.valueOf(tecId) instanceof Integer){
                labReport.setLabTechID(Integer.valueOf(tecId));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Lab technician ID is incorrect");
            textLabTecID.setText(null);
            return;
        }
        try{
            if(Integer.valueOf(textYear.getText())instanceof Integer && Integer.valueOf(textMonth.getText())instanceof Integer && Integer.valueOf(textDate.getText())instanceof Integer){
                labReport.setDate(Help.getDate(Integer.valueOf(textYear.getText()), Integer.valueOf(textMonth.getText()), Integer.valueOf(textDate.getText())));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Date is incorrect");
            textYear.setText(null);
            textMonth.setText(null);
            textDate.setText(null);
            return;
        }
        try{
            labReport.getDataList().clear();
            if(Double.valueOf(data) instanceof Double){
                 labReport.addDataToTheList(data);
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Data is incorrect");
            fbsAmount.setText(null);
            return;
        }
        
        
        try{
            if(updateState){
                ad.updateLabReport(labReport);
            }else{
                ad.addLabReport(labReport);
            }
            JOptionPane.showMessageDialog(null, "Data is successfully added");
            this.dispose();
            new LabReportGUI().setVisible(true);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Error in patient id or tecnician id");
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
        
       
    }//GEN-LAST:event_btnconfirmFBSActionPerformed

    private void btnConfirmLPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmLPActionPerformed
        if(updateState){
              DBOperations ad = DBOperations.getInstace(); 
            try {
                labReport=ad.getLastLabReport();
            } catch (SQLException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ConnectionTimeOutException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            }
            }else{
                labReport=new LabReport();
            }
        
        String item=(String)TestBox.getSelectedItem();
        labReport.setTestType(Integer.valueOf(item));
        String tecId=textLabTecID.getText();
        String pid=textPatientID.getText();
        String data;
        try{
            if(Integer.valueOf(pid) instanceof Integer && Integer.valueOf(pid)<=ad.getLastPID()){
                labReport.setPID(Integer.valueOf(pid));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Patient ID is incorrect");
            textPatientID.setText(null);
            return;
        } catch (SQLException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Patient ID is not registered");
            return;
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return;
           
        }
        try{
            if(Integer.valueOf(tecId) instanceof Integer){
                labReport.setLabTechID(Integer.valueOf(tecId));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Lab technician ID is incorrect");
            textLabTecID.setText(null);
            return;
        }
        try{
            if(Integer.valueOf(textYear.getText())instanceof Integer && Integer.valueOf(textMonth.getText())instanceof Integer && Integer.valueOf(textDate.getText())instanceof Integer){
                labReport.setDate(Help.getDate(Integer.valueOf(textYear.getText()), Integer.valueOf(textMonth.getText()), Integer.valueOf(textDate.getText())));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Date is incorrect");
            textYear.setText(null);
            textMonth.setText(null);
            textDate.setText(null);
            return;
        }
        labReport.getDataList().clear();
        for(int i=0;i<LPtable.getRowCount();i++){
            data=(String)LPtable.getValueAt(i,1);
            labReport.addDataToTheList(data);
        }  
        
        
        try{
            if(updateState){
                ad.updateLabReport(labReport);
            }else{
                ad.addLabReport(labReport);
            }
            JOptionPane.showMessageDialog(null, "Data is successfully added");
        this.dispose();
        new LabReportGUI().setVisible(true);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Error in patient id or tecnician id");
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmLPActionPerformed

    private void LPtableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LPtableKeyReleased
        int num=evt.getKeyCode();
        if(!((96<=num && 105>=num)||num==110 || evt.isActionKey()|| num==10)){
            cellEditor=(DefaultCellEditor)LPtable.getCellEditor(LPtable.getSelectedRow(),LPtable.getSelectedColumn());
            ((JTextField)cellEditor.getComponent()).setText(null);
        }
    }//GEN-LAST:event_LPtableKeyReleased

    private void btnConfirmFBCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmFBCActionPerformed
        if(updateState){
              DBOperations ad = DBOperations.getInstace(); 
            try {
                labReport=ad.getLastLabReport();
            } catch (SQLException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ConnectionTimeOutException ex) {
                Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
               
            }
            }else{
                labReport=new LabReport();
            }
        
        String item=(String)TestBox.getSelectedItem();
        labReport.setTestType(Integer.valueOf(item));
        String tecId=textLabTecID.getText();
        String pid=textPatientID.getText();
        String data;
        try{
            if(Integer.valueOf(pid) instanceof Integer && Integer.valueOf(pid)<=ad.getLastPID()){
                labReport.setPID(Integer.valueOf(pid));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Patient ID is incorrect");
            textPatientID.setText(null);
            return;
        } catch (SQLException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Patient ID is not registered");
            return;
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        
        }
        try{
            if(Integer.valueOf(tecId) instanceof Integer){
                labReport.setLabTechID(Integer.valueOf(tecId));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Lab technician ID is incorrect");
            textLabTecID.setText(null);
            return;
        }
        try{
            if(Integer.valueOf(textYear.getText())instanceof Integer && Integer.valueOf(textMonth.getText())instanceof Integer && Integer.valueOf(textDate.getText())instanceof Integer){
                labReport.setDate(Help.getDate(Integer.valueOf(textYear.getText()), Integer.valueOf(textMonth.getText()), Integer.valueOf(textDate.getText())));
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "Date is incorrect");
            textYear.setText(null);
            textMonth.setText(null);
            textDate.setText(null);
            return;
        }
        labReport.getDataList().clear();
        for(int i=0;i<FBCtable.getRowCount();i++){
            data=(String)FBCtable.getValueAt(i,1);
            labReport.addDataToTheList(data);
        }  
        
        
        try{
            if(updateState){
                ad.updateLabReport(labReport);
            }else{
                ad.addLabReport(labReport);
            }
            JOptionPane.showMessageDialog(null, "Data is successfully added");
            this.dispose();
            new LabReportGUI().setVisible(true);
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, "Error in patient id or tecnician id");
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnConfirmFBCActionPerformed

    private void FBCtableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FBCtableKeyReleased
        int num=evt.getKeyCode();
        if(!((96<=num && 105>=num)||num==110 || evt.isActionKey()|| num==10)){
            cellEditor=(DefaultCellEditor)FBCtable.getCellEditor(FBCtable.getSelectedRow(),FBCtable.getSelectedColumn());
            ((JTextField)cellEditor.getComponent()).setText(null);
        }
    }//GEN-LAST:event_FBCtableKeyReleased

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
        LoginFace l = new LoginFace();
        l.setLocationRelativeTo(null);
        l.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        try {
            btnEdit.setEnabled(false);
            updateState=true;
            LabReport lr=ad.getLastLabReport();//instead of this,should use below test case without saver.
            
            /*LabReport lr = new LabReport();
            lr.setPID(1);
            lr.setDate(new Date(1992,02,03));
            lr.setDate(Help.getDate(2015, 1, 5));
            lr.setLabReportNo(1);
            lr.setTestType(5);
            lr.setLabTechID(1);
            
            
            for(int i=0;i<6;i++){
                lr.addDataToTheList(""+i);
            }*/
            
            String s=String.valueOf(lr.getTestType());
            TestBox.setSelectedIndex(Integer.valueOf(lr.getTestType())-1);
            
            
            TestBox.setEnabled(false);
            textPatientID.setText(String.valueOf(lr.getPID()));
            textLabTecID.setText(String.valueOf(lr.getLabTechID()));
            textDate.setText(String.valueOf(Help.getDay(lr.getDate())));
            textMonth.setText(String.valueOf(Help.getMonth(lr.getDate())));
            textYear.setText(String.valueOf(Help.getYear(lr.getDate())));
            
            ArrayList<String> datalist=lr.getDataList();
            String test=chooseTest();
            switch (test) {
                case "01":
                    fbsAmount.setText(datalist.get(0));
                    fbsAmount.setEditable(updateState);
                    break;
                case "02":
                    for(int i=0;i<datalist.size();i++){
                        UFRtable.setValueAt(datalist.get(i), i, 1);
                    }
                    break;
                case "03":
                    for(int i=0;i<datalist.size();i++){
                        FBCtable.setValueAt(datalist.get(i), i, 1);
                    }
                    break;
                case "04":
                    for(int i=0;i<datalist.size();i++){
                        LPtable.setValueAt(datalist.get(i), i, 1);
                    }
                    break;
                case "05":
                    CholesterolAmount.setText(datalist.get(0));
                    break;
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            
        } catch (ConnectionTimeOutException ex) {
            Logger.getLogger(LabReportGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
        }
         
        
        
    }//GEN-LAST:event_btnEditActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to log out?","Confirm Action", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION){
            this.dispose();
            new LoginFace().setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosing
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabReportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabReportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabReportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabReportGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                LabReportGUI l=new LabReportGUI();
                l.setTitle("Lab Report");
                l.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CholesterolAmount;
    private javax.swing.JPanel FBCpanel;
    private javax.swing.JTable FBCtable;
    private javax.swing.JPanel FBSpanel;
    private javax.swing.JPanel LPpanel;
    private javax.swing.JTable LPtable;
    private javax.swing.JPanel TCpanel;
    private javax.swing.JComboBox TestBox;
    private javax.swing.JPanel UFRpanel;
    private javax.swing.JTable UFRtable;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirmFBC;
    private javax.swing.JButton btnConfirmLP;
    private javax.swing.JButton btnConfirmTC;
    private javax.swing.JButton btnConfirmUFR;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnconfirmFBS;
    private javax.swing.JLabel date;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JTextField fbsAmount;
    private javax.swing.JPanel generalDetailPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labTechnicianID;
    private javax.swing.JLabel patientID;
    private javax.swing.JLabel reportName;
    private javax.swing.JLabel testID;
    private javax.swing.JLabel testName;
    private javax.swing.JTextField textDate;
    private javax.swing.JTextField textLabTecID;
    private javax.swing.JTextField textMonth;
    private javax.swing.JTextField textPatientID;
    private javax.swing.JTextField textTestName;
    private javax.swing.JTextField textYear;
    private javax.swing.JLabel titleName;
    private javax.swing.JPanel titlePanel;
    // End of variables declaration//GEN-END:variables
}
